/* automatically generated by rust-bindgen 0.69.4 */

pub const OPENMPT_API_VERSION_MAJOR: u32 = 0;
pub const OPENMPT_API_VERSION_MINOR: u32 = 7;
pub const OPENMPT_API_VERSION_PATCH: u32 = 9;
pub const OPENMPT_API_VERSION_PREREL: &[u8; 1] = b"\0";
pub const OPENMPT_API_VERSION_IS_PREREL: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const OPENMPT_STREAM_SEEK_SET: u32 = 0;
pub const OPENMPT_STREAM_SEEK_CUR: u32 = 1;
pub const OPENMPT_STREAM_SEEK_END: u32 = 2;
pub const OPENMPT_ERROR_OK: u32 = 0;
pub const OPENMPT_ERROR_BASE: u32 = 256;
pub const OPENMPT_ERROR_UNKNOWN: u32 = 257;
pub const OPENMPT_ERROR_EXCEPTION: u32 = 267;
pub const OPENMPT_ERROR_OUT_OF_MEMORY: u32 = 277;
pub const OPENMPT_ERROR_RUNTIME: u32 = 286;
pub const OPENMPT_ERROR_RANGE: u32 = 287;
pub const OPENMPT_ERROR_OVERFLOW: u32 = 288;
pub const OPENMPT_ERROR_UNDERFLOW: u32 = 289;
pub const OPENMPT_ERROR_LOGIC: u32 = 296;
pub const OPENMPT_ERROR_DOMAIN: u32 = 297;
pub const OPENMPT_ERROR_LENGTH: u32 = 298;
pub const OPENMPT_ERROR_OUT_OF_RANGE: u32 = 299;
pub const OPENMPT_ERROR_INVALID_ARGUMENT: u32 = 300;
pub const OPENMPT_ERROR_GENERAL: u32 = 357;
pub const OPENMPT_ERROR_INVALID_MODULE_POINTER: u32 = 358;
pub const OPENMPT_ERROR_ARGUMENT_NULL_POINTER: u32 = 359;
pub const OPENMPT_ERROR_FUNC_RESULT_NONE: u32 = 0;
pub const OPENMPT_ERROR_FUNC_RESULT_LOG: u32 = 1;
pub const OPENMPT_ERROR_FUNC_RESULT_STORE: u32 = 2;
pub const OPENMPT_ERROR_FUNC_RESULT_DEFAULT: u32 = 3;
pub const OPENMPT_PROBE_FILE_HEADER_FLAGS_MODULES: u32 = 1;
pub const OPENMPT_PROBE_FILE_HEADER_FLAGS_CONTAINERS: u32 = 2;
pub const OPENMPT_PROBE_FILE_HEADER_FLAGS_DEFAULT: u32 = 3;
pub const OPENMPT_PROBE_FILE_HEADER_FLAGS_NONE: u32 = 0;
pub const OPENMPT_PROBE_FILE_HEADER_RESULT_SUCCESS: u32 = 1;
pub const OPENMPT_PROBE_FILE_HEADER_RESULT_FAILURE: u32 = 0;
pub const OPENMPT_PROBE_FILE_HEADER_RESULT_WANTMOREDATA: i32 = -1;
pub const OPENMPT_PROBE_FILE_HEADER_RESULT_ERROR: i32 = -255;
pub const OPENMPT_MODULE_RENDER_MASTERGAIN_MILLIBEL: u32 = 1;
pub const OPENMPT_MODULE_RENDER_STEREOSEPARATION_PERCENT: u32 = 2;
pub const OPENMPT_MODULE_RENDER_INTERPOLATIONFILTER_LENGTH: u32 = 3;
pub const OPENMPT_MODULE_RENDER_VOLUMERAMPING_STRENGTH: u32 = 4;
pub const OPENMPT_MODULE_COMMAND_NOTE: u32 = 0;
pub const OPENMPT_MODULE_COMMAND_INSTRUMENT: u32 = 1;
pub const OPENMPT_MODULE_COMMAND_VOLUMEEFFECT: u32 = 2;
pub const OPENMPT_MODULE_COMMAND_EFFECT: u32 = 3;
pub const OPENMPT_MODULE_COMMAND_VOLUME: u32 = 4;
pub const OPENMPT_MODULE_COMMAND_PARAMETER: u32 = 5;
pub const LIBOPENMPT_DEPRECATED_STRING_CONSTANT: ::std::os::raw::c_int = 0;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2),
        ),
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__fsid_t), "::", stringify!(__val)),
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn openmpt_get_library_version() -> u32;
}
extern "C" {
    pub fn openmpt_get_core_version() -> u32;
}
extern "C" {
    pub fn openmpt_free_string(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn openmpt_get_string(
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_get_supported_extensions() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_is_extension_supported(
        extension: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type openmpt_stream_read_func = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_void,
        bytes: usize,
    ) -> usize,
>;
pub type openmpt_stream_seek_func = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut ::std::os::raw::c_void,
        offset: i64,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type openmpt_stream_tell_func = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut ::std::os::raw::c_void) -> i64,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openmpt_stream_callbacks {
    pub read: openmpt_stream_read_func,
    pub seek: openmpt_stream_seek_func,
    pub tell: openmpt_stream_tell_func,
}
#[test]
fn bindgen_test_layout_openmpt_stream_callbacks() {
    const UNINIT: ::std::mem::MaybeUninit<openmpt_stream_callbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<openmpt_stream_callbacks>(),
        24usize,
        concat!("Size of: ", stringify!(openmpt_stream_callbacks)),
    );
    assert_eq!(
        ::std::mem::align_of::<openmpt_stream_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(openmpt_stream_callbacks)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openmpt_stream_callbacks),
            "::",
            stringify!(read),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openmpt_stream_callbacks),
            "::",
            stringify!(seek),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tell) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(openmpt_stream_callbacks),
            "::",
            stringify!(tell),
        ),
    );
}
pub type openmpt_log_func = ::std::option::Option<
    unsafe extern "C" fn(
        message: *const ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn openmpt_log_func_default(
        message: *const ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn openmpt_log_func_silent(
        message: *const ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn openmpt_error_is_transient(
        error: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_error_string(
        error: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type openmpt_error_func = ::std::option::Option<
    unsafe extern "C" fn(
        error: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn openmpt_error_func_default(
        error: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_error_func_log(
        error: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_error_func_store(
        error: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_error_func_ignore(
        error: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_error_func_errno(
        error: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_error_func_errno_userdata(
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn openmpt_could_open_probability(
        stream_callbacks: openmpt_stream_callbacks,
        stream: *mut ::std::os::raw::c_void,
        effort: f64,
        logfunc: openmpt_log_func,
        user: *mut ::std::os::raw::c_void,
    ) -> f64;
}
extern "C" {
    pub fn openmpt_could_open_propability(
        stream_callbacks: openmpt_stream_callbacks,
        stream: *mut ::std::os::raw::c_void,
        effort: f64,
        logfunc: openmpt_log_func,
        user: *mut ::std::os::raw::c_void,
    ) -> f64;
}
extern "C" {
    pub fn openmpt_could_open_probability2(
        stream_callbacks: openmpt_stream_callbacks,
        stream: *mut ::std::os::raw::c_void,
        effort: f64,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
        error_message: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn openmpt_probe_file_header_get_recommended_size() -> usize;
}
extern "C" {
    pub fn openmpt_probe_file_header(
        flags: u64,
        data: *const ::std::os::raw::c_void,
        size: usize,
        filesize: u64,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
        error_message: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_probe_file_header_without_filesize(
        flags: u64,
        data: *const ::std::os::raw::c_void,
        size: usize,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
        error_message: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_probe_file_header_from_stream(
        flags: u64,
        stream_callbacks: openmpt_stream_callbacks,
        stream: *mut ::std::os::raw::c_void,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
        error_message: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openmpt_module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openmpt_module_initial_ctl {
    pub ctl: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_openmpt_module_initial_ctl() {
    const UNINIT: ::std::mem::MaybeUninit<openmpt_module_initial_ctl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<openmpt_module_initial_ctl>(),
        16usize,
        concat!("Size of: ", stringify!(openmpt_module_initial_ctl)),
    );
    assert_eq!(
        ::std::mem::align_of::<openmpt_module_initial_ctl>(),
        8usize,
        concat!("Alignment of ", stringify!(openmpt_module_initial_ctl)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openmpt_module_initial_ctl),
            "::",
            stringify!(ctl),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(openmpt_module_initial_ctl),
            "::",
            stringify!(value),
        ),
    );
}
extern "C" {
    pub fn openmpt_module_create(
        stream_callbacks: openmpt_stream_callbacks,
        stream: *mut ::std::os::raw::c_void,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        ctls: *const openmpt_module_initial_ctl,
    ) -> *mut openmpt_module;
}
extern "C" {
    pub fn openmpt_module_create2(
        stream_callbacks: openmpt_stream_callbacks,
        stream: *mut ::std::os::raw::c_void,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
        error_message: *mut *const ::std::os::raw::c_char,
        ctls: *const openmpt_module_initial_ctl,
    ) -> *mut openmpt_module;
}
extern "C" {
    pub fn openmpt_module_create_from_memory(
        filedata: *const ::std::os::raw::c_void,
        filesize: usize,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        ctls: *const openmpt_module_initial_ctl,
    ) -> *mut openmpt_module;
}
extern "C" {
    pub fn openmpt_module_create_from_memory2(
        filedata: *const ::std::os::raw::c_void,
        filesize: usize,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
        error_message: *mut *const ::std::os::raw::c_char,
        ctls: *const openmpt_module_initial_ctl,
    ) -> *mut openmpt_module;
}
extern "C" {
    pub fn openmpt_module_destroy(mod_: *mut openmpt_module);
}
extern "C" {
    pub fn openmpt_module_set_log_func(
        mod_: *mut openmpt_module,
        logfunc: openmpt_log_func,
        loguser: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn openmpt_module_set_error_func(
        mod_: *mut openmpt_module,
        errfunc: openmpt_error_func,
        erruser: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn openmpt_module_error_get_last(
        mod_: *mut openmpt_module,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_error_get_last_message(
        mod_: *mut openmpt_module,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_error_set_last(
        mod_: *mut openmpt_module,
        error: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn openmpt_module_error_clear(mod_: *mut openmpt_module);
}
extern "C" {
    pub fn openmpt_module_select_subsong(
        mod_: *mut openmpt_module,
        subsong: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_get_selected_subsong(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_set_repeat_count(
        mod_: *mut openmpt_module,
        repeat_count: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_get_repeat_count(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_duration_seconds(mod_: *mut openmpt_module) -> f64;
}
extern "C" {
    pub fn openmpt_module_set_position_seconds(
        mod_: *mut openmpt_module,
        seconds: f64,
    ) -> f64;
}
extern "C" {
    pub fn openmpt_module_get_position_seconds(mod_: *mut openmpt_module) -> f64;
}
extern "C" {
    pub fn openmpt_module_set_position_order_row(
        mod_: *mut openmpt_module,
        order: i32,
        row: i32,
    ) -> f64;
}
extern "C" {
    pub fn openmpt_module_get_render_param(
        mod_: *mut openmpt_module,
        param: ::std::os::raw::c_int,
        value: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_set_render_param(
        mod_: *mut openmpt_module,
        param: ::std::os::raw::c_int,
        value: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_read_mono(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        mono: *mut i16,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_stereo(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        left: *mut i16,
        right: *mut i16,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_quad(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        left: *mut i16,
        right: *mut i16,
        rear_left: *mut i16,
        rear_right: *mut i16,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_float_mono(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        mono: *mut f32,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_float_stereo(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        left: *mut f32,
        right: *mut f32,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_float_quad(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        left: *mut f32,
        right: *mut f32,
        rear_left: *mut f32,
        rear_right: *mut f32,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_interleaved_stereo(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        interleaved_stereo: *mut i16,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_interleaved_quad(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        interleaved_quad: *mut i16,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_interleaved_float_stereo(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        interleaved_stereo: *mut f32,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_read_interleaved_float_quad(
        mod_: *mut openmpt_module,
        samplerate: i32,
        count: usize,
        interleaved_quad: *mut f32,
    ) -> usize;
}
extern "C" {
    pub fn openmpt_module_get_metadata_keys(
        mod_: *mut openmpt_module,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_metadata(
        mod_: *mut openmpt_module,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_current_estimated_bpm(mod_: *mut openmpt_module) -> f64;
}
extern "C" {
    pub fn openmpt_module_get_current_speed(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_current_tempo(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_current_tempo2(mod_: *mut openmpt_module) -> f64;
}
extern "C" {
    pub fn openmpt_module_get_current_order(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_current_pattern(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_current_row(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_current_playing_channels(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_current_channel_vu_mono(
        mod_: *mut openmpt_module,
        channel: i32,
    ) -> f32;
}
extern "C" {
    pub fn openmpt_module_get_current_channel_vu_left(
        mod_: *mut openmpt_module,
        channel: i32,
    ) -> f32;
}
extern "C" {
    pub fn openmpt_module_get_current_channel_vu_right(
        mod_: *mut openmpt_module,
        channel: i32,
    ) -> f32;
}
extern "C" {
    pub fn openmpt_module_get_current_channel_vu_rear_left(
        mod_: *mut openmpt_module,
        channel: i32,
    ) -> f32;
}
extern "C" {
    pub fn openmpt_module_get_current_channel_vu_rear_right(
        mod_: *mut openmpt_module,
        channel: i32,
    ) -> f32;
}
extern "C" {
    pub fn openmpt_module_get_num_subsongs(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_num_channels(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_num_orders(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_num_patterns(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_num_instruments(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_num_samples(mod_: *mut openmpt_module) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_subsong_name(
        mod_: *mut openmpt_module,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_channel_name(
        mod_: *mut openmpt_module,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_order_name(
        mod_: *mut openmpt_module,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_pattern_name(
        mod_: *mut openmpt_module,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_instrument_name(
        mod_: *mut openmpt_module,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_sample_name(
        mod_: *mut openmpt_module,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_order_pattern(
        mod_: *mut openmpt_module,
        order: i32,
    ) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_pattern_num_rows(
        mod_: *mut openmpt_module,
        pattern: i32,
    ) -> i32;
}
extern "C" {
    pub fn openmpt_module_get_pattern_row_channel_command(
        mod_: *mut openmpt_module,
        pattern: i32,
        row: i32,
        channel: i32,
        command: ::std::os::raw::c_int,
    ) -> u8;
}
extern "C" {
    pub fn openmpt_module_format_pattern_row_channel_command(
        mod_: *mut openmpt_module,
        pattern: i32,
        row: i32,
        channel: i32,
        command: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_highlight_pattern_row_channel_command(
        mod_: *mut openmpt_module,
        pattern: i32,
        row: i32,
        channel: i32,
        command: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_format_pattern_row_channel(
        mod_: *mut openmpt_module,
        pattern: i32,
        row: i32,
        channel: i32,
        width: usize,
        pad: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_highlight_pattern_row_channel(
        mod_: *mut openmpt_module,
        pattern: i32,
        row: i32,
        channel: i32,
        width: usize,
        pad: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_get_ctls(
        mod_: *mut openmpt_module,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_ctl_get(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_ctl_get_boolean(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_ctl_get_integer(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
    ) -> i64;
}
extern "C" {
    pub fn openmpt_module_ctl_get_floatingpoint(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn openmpt_module_ctl_get_text(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openmpt_module_ctl_set(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_ctl_set_boolean(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_ctl_set_integer(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_ctl_set_floatingpoint(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openmpt_module_ctl_set_text(
        mod_: *mut openmpt_module,
        ctl: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
